
stm32f407_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000918  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000aa0  08000aa8  00001aa8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000aa0  08000aa0  00001aa8  2**0
                  CONTENTS
  4 .ARM          00000000  08000aa0  08000aa0  00001aa8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000aa0  08000aa8  00001aa8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000aa0  08000aa0  00001aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000aa4  08000aa4  00001aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001aa8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001aa8  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001aa8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000aad  00000000  00000000  00001ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002df  00000000  00000000  00002585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c8  00000000  00000000  00002868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000008c  00000000  00000000  00002930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001f9d  00000000  00000000  000029bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001065  00000000  00000000  00004959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008d56  00000000  00000000  000059be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000e714  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000288  00000000  00000000  0000e758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  0000e9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000a88 	.word	0x08000a88

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000a88 	.word	0x08000a88

080001c8 <delay>:
#include <string.h>
#include "stm32f407xx.h"
#include "stm32f407xx_gpio_driver.h"

void delay(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < 500000/2; i++);
 80001ce:	2300      	movs	r3, #0
 80001d0:	607b      	str	r3, [r7, #4]
 80001d2:	e002      	b.n	80001da <delay+0x12>
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	3301      	adds	r3, #1
 80001d8:	607b      	str	r3, [r7, #4]
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	4a04      	ldr	r2, [pc, #16]	@ (80001f0 <delay+0x28>)
 80001de:	4293      	cmp	r3, r2
 80001e0:	d9f8      	bls.n	80001d4 <delay+0xc>
}
 80001e2:	bf00      	nop
 80001e4:	bf00      	nop
 80001e6:	370c      	adds	r7, #12
 80001e8:	46bd      	mov	sp, r7
 80001ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ee:	4770      	bx	lr
 80001f0:	0003d08f 	.word	0x0003d08f

080001f4 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
	delay();
 80001f8:	f7ff ffe6 	bl	80001c8 <delay>
	// Driver layer handling
	GPIO_IRQHandling(GPIO_PIN_NO_6);
 80001fc:	2006      	movs	r0, #6
 80001fe:	f000 fbf7 	bl	80009f0 <GPIO_IRQHandling>

	// Application layer handling
	GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_12);
 8000202:	210c      	movs	r1, #12
 8000204:	4802      	ldr	r0, [pc, #8]	@ (8000210 <EXTI9_5_IRQHandler+0x1c>)
 8000206:	f000 fb30 	bl	800086a <GPIO_ToggleOutputPin>
} // EXTI9_5_IRQHandler
 800020a:	bf00      	nop
 800020c:	bd80      	pop	{r7, pc}
 800020e:	bf00      	nop
 8000210:	40020c00 	.word	0x40020c00

08000214 <main>:


int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b086      	sub	sp, #24
 8000218:	af00      	add	r7, sp, #0

	GPIO_Handle_t gpioLed;
	memset(&gpioLed, 0, sizeof(gpioLed));
 800021a:	f107 030c 	add.w	r3, r7, #12
 800021e:	220c      	movs	r2, #12
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f000 fc04 	bl	8000a30 <memset>

	// Set the base address to GPIO Port D
	gpioLed.pGPIOx = GPIOD;
 8000228:	4b1f      	ldr	r3, [pc, #124]	@ (80002a8 <main+0x94>)
 800022a:	60fb      	str	r3, [r7, #12]

	// Set pin configuration
	gpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;		// The LED we are toggling is the green onboard LED connected to pin 12 on port D
 800022c:	230c      	movs	r3, #12
 800022e:	743b      	strb	r3, [r7, #16]
	gpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000230:	2301      	movs	r3, #1
 8000232:	747b      	strb	r3, [r7, #17]
	gpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000234:	2302      	movs	r3, #2
 8000236:	74bb      	strb	r3, [r7, #18]
	gpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;	// Set to push-pull output type
 8000238:	2300      	movs	r3, #0
 800023a:	753b      	strb	r3, [r7, #20]
	gpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800023c:	2300      	movs	r3, #0
 800023e:	74fb      	strb	r3, [r7, #19]

	GPIO_PeriClockControl(gpioLed.pGPIOx, ENABLE);
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	2101      	movs	r1, #1
 8000244:	4618      	mov	r0, r3
 8000246:	f000 f85b 	bl	8000300 <GPIO_PeriClockControl>
	GPIO_Init(&gpioLed);
 800024a:	f107 030c 	add.w	r3, r7, #12
 800024e:	4618      	mov	r0, r3
 8000250:	f000 f942 	bl	80004d8 <GPIO_Init>
	GPIO_WriteToOutputPin(gpioLed.pGPIOx, gpioLed.GPIO_PinConfig.GPIO_PinNumber, GPIO_PIN_RESET);
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	7c39      	ldrb	r1, [r7, #16]
 8000258:	2200      	movs	r2, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f000 fae0 	bl	8000820 <GPIO_WriteToOutputPin>

	GPIO_Handle_t gpioButton;
	memset(&gpioButton, 0, sizeof(gpioButton));
 8000260:	463b      	mov	r3, r7
 8000262:	220c      	movs	r2, #12
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f000 fbe2 	bl	8000a30 <memset>

	// Set base address to GPIO port D
	gpioButton.pGPIOx = GPIOD;
 800026c:	4b0e      	ldr	r3, [pc, #56]	@ (80002a8 <main+0x94>)
 800026e:	603b      	str	r3, [r7, #0]

	// Set pin configuration
	gpioButton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8000270:	2306      	movs	r3, #6
 8000272:	713b      	strb	r3, [r7, #4]
	gpioButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;	// Interrupt mode with falling edge trigger
 8000274:	2304      	movs	r3, #4
 8000276:	717b      	strb	r3, [r7, #5]
	gpioButton.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000278:	2302      	movs	r3, #2
 800027a:	71bb      	strb	r3, [r7, #6]
	gpioButton.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;	// We will be using an external 22k Ohm pull-up resistor
 800027c:	2301      	movs	r3, #1
 800027e:	71fb      	strb	r3, [r7, #7]

	// Enable peripheral clock
	GPIO_PeriClockControl(gpioButton.pGPIOx, ENABLE);
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	2101      	movs	r1, #1
 8000284:	4618      	mov	r0, r3
 8000286:	f000 f83b 	bl	8000300 <GPIO_PeriClockControl>
	GPIO_Init(&gpioButton);
 800028a:	463b      	mov	r3, r7
 800028c:	4618      	mov	r0, r3
 800028e:	f000 f923 	bl	80004d8 <GPIO_Init>


	// IRQ configurations
	GPIO_IRQPriorityConfig(IRQ_NO_EXT9_5, NVIC_IRQ_PRI15);		// Setting priority is optional
 8000292:	210f      	movs	r1, #15
 8000294:	2017      	movs	r0, #23
 8000296:	f000 fb83 	bl	80009a0 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXT9_5, ENABLE);
 800029a:	2101      	movs	r1, #1
 800029c:	2017      	movs	r0, #23
 800029e:	f000 faf9 	bl	8000894 <GPIO_IRQInterruptConfig>

	while(1);
 80002a2:	bf00      	nop
 80002a4:	e7fd      	b.n	80002a2 <main+0x8e>
 80002a6:	bf00      	nop
 80002a8:	40020c00 	.word	0x40020c00

080002ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002ac:	480d      	ldr	r0, [pc, #52]	@ (80002e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b4:	480c      	ldr	r0, [pc, #48]	@ (80002e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80002b6:	490d      	ldr	r1, [pc, #52]	@ (80002ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b8:	4a0d      	ldr	r2, [pc, #52]	@ (80002f0 <LoopForever+0xe>)
  movs r3, #0
 80002ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002bc:	e002      	b.n	80002c4 <LoopCopyDataInit>

080002be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002c2:	3304      	adds	r3, #4

080002c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c8:	d3f9      	bcc.n	80002be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ca:	4a0a      	ldr	r2, [pc, #40]	@ (80002f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002cc:	4c0a      	ldr	r4, [pc, #40]	@ (80002f8 <LoopForever+0x16>)
  movs r3, #0
 80002ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002d0:	e001      	b.n	80002d6 <LoopFillZerobss>

080002d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d4:	3204      	adds	r2, #4

080002d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d8:	d3fb      	bcc.n	80002d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002da:	f000 fbb1 	bl	8000a40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002de:	f7ff ff99 	bl	8000214 <main>

080002e2 <LoopForever>:

LoopForever:
  b LoopForever
 80002e2:	e7fe      	b.n	80002e2 <LoopForever>
  ldr   r0, =_estack
 80002e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002ec:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002f0:	08000aa8 	.word	0x08000aa8
  ldr r2, =_sbss
 80002f4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002f8:	2000001c 	.word	0x2000001c

080002fc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002fc:	e7fe      	b.n	80002fc <ADC_IRQHandler>
	...

08000300 <GPIO_PeriClockControl>:

/**
 * Enable/Disable peripheral clock for the given GPIO port
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
 8000308:	460b      	mov	r3, r1
 800030a:	70fb      	strb	r3, [r7, #3]
    if (EnorDi == ENABLE)
 800030c:	78fb      	ldrb	r3, [r7, #3]
 800030e:	2b01      	cmp	r3, #1
 8000310:	d162      	bne.n	80003d8 <GPIO_PeriClockControl+0xd8>
    {
        if (pGPIOx == GPIOA)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4a66      	ldr	r2, [pc, #408]	@ (80004b0 <GPIO_PeriClockControl+0x1b0>)
 8000316:	4293      	cmp	r3, r2
 8000318:	d106      	bne.n	8000328 <GPIO_PeriClockControl+0x28>
        {
            GPIOA_PCLK_EN();
 800031a:	4b66      	ldr	r3, [pc, #408]	@ (80004b4 <GPIO_PeriClockControl+0x1b4>)
 800031c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800031e:	4a65      	ldr	r2, [pc, #404]	@ (80004b4 <GPIO_PeriClockControl+0x1b4>)
 8000320:	f043 0301 	orr.w	r3, r3, #1
 8000324:	6313      	str	r3, [r2, #48]	@ 0x30
        else
        {
            // Handle invalid GPIO port
        }
    }
}
 8000326:	e0bc      	b.n	80004a2 <GPIO_PeriClockControl+0x1a2>
        else if (pGPIOx == GPIOB)
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	4a63      	ldr	r2, [pc, #396]	@ (80004b8 <GPIO_PeriClockControl+0x1b8>)
 800032c:	4293      	cmp	r3, r2
 800032e:	d106      	bne.n	800033e <GPIO_PeriClockControl+0x3e>
            GPIOB_PCLK_EN();
 8000330:	4b60      	ldr	r3, [pc, #384]	@ (80004b4 <GPIO_PeriClockControl+0x1b4>)
 8000332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000334:	4a5f      	ldr	r2, [pc, #380]	@ (80004b4 <GPIO_PeriClockControl+0x1b4>)
 8000336:	f043 0302 	orr.w	r3, r3, #2
 800033a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800033c:	e0b1      	b.n	80004a2 <GPIO_PeriClockControl+0x1a2>
        else if (pGPIOx == GPIOC)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4a5e      	ldr	r2, [pc, #376]	@ (80004bc <GPIO_PeriClockControl+0x1bc>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d106      	bne.n	8000354 <GPIO_PeriClockControl+0x54>
            GPIOC_PCLK_EN();
 8000346:	4b5b      	ldr	r3, [pc, #364]	@ (80004b4 <GPIO_PeriClockControl+0x1b4>)
 8000348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800034a:	4a5a      	ldr	r2, [pc, #360]	@ (80004b4 <GPIO_PeriClockControl+0x1b4>)
 800034c:	f043 0304 	orr.w	r3, r3, #4
 8000350:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000352:	e0a6      	b.n	80004a2 <GPIO_PeriClockControl+0x1a2>
        else if (pGPIOx == GPIOD)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	4a5a      	ldr	r2, [pc, #360]	@ (80004c0 <GPIO_PeriClockControl+0x1c0>)
 8000358:	4293      	cmp	r3, r2
 800035a:	d106      	bne.n	800036a <GPIO_PeriClockControl+0x6a>
            GPIOD_PCLK_EN();
 800035c:	4b55      	ldr	r3, [pc, #340]	@ (80004b4 <GPIO_PeriClockControl+0x1b4>)
 800035e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000360:	4a54      	ldr	r2, [pc, #336]	@ (80004b4 <GPIO_PeriClockControl+0x1b4>)
 8000362:	f043 0308 	orr.w	r3, r3, #8
 8000366:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000368:	e09b      	b.n	80004a2 <GPIO_PeriClockControl+0x1a2>
        else if (pGPIOx == GPIOE)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	4a55      	ldr	r2, [pc, #340]	@ (80004c4 <GPIO_PeriClockControl+0x1c4>)
 800036e:	4293      	cmp	r3, r2
 8000370:	d106      	bne.n	8000380 <GPIO_PeriClockControl+0x80>
            GPIOE_PCLK_EN();
 8000372:	4b50      	ldr	r3, [pc, #320]	@ (80004b4 <GPIO_PeriClockControl+0x1b4>)
 8000374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000376:	4a4f      	ldr	r2, [pc, #316]	@ (80004b4 <GPIO_PeriClockControl+0x1b4>)
 8000378:	f043 0310 	orr.w	r3, r3, #16
 800037c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800037e:	e090      	b.n	80004a2 <GPIO_PeriClockControl+0x1a2>
        else if (pGPIOx == GPIOF)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4a51      	ldr	r2, [pc, #324]	@ (80004c8 <GPIO_PeriClockControl+0x1c8>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d106      	bne.n	8000396 <GPIO_PeriClockControl+0x96>
            GPIOF_PCLK_EN();
 8000388:	4b4a      	ldr	r3, [pc, #296]	@ (80004b4 <GPIO_PeriClockControl+0x1b4>)
 800038a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800038c:	4a49      	ldr	r2, [pc, #292]	@ (80004b4 <GPIO_PeriClockControl+0x1b4>)
 800038e:	f043 0320 	orr.w	r3, r3, #32
 8000392:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000394:	e085      	b.n	80004a2 <GPIO_PeriClockControl+0x1a2>
        else if (pGPIOx == GPIOG)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	4a4c      	ldr	r2, [pc, #304]	@ (80004cc <GPIO_PeriClockControl+0x1cc>)
 800039a:	4293      	cmp	r3, r2
 800039c:	d106      	bne.n	80003ac <GPIO_PeriClockControl+0xac>
            GPIOG_PCLK_EN();
 800039e:	4b45      	ldr	r3, [pc, #276]	@ (80004b4 <GPIO_PeriClockControl+0x1b4>)
 80003a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003a2:	4a44      	ldr	r2, [pc, #272]	@ (80004b4 <GPIO_PeriClockControl+0x1b4>)
 80003a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003a8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003aa:	e07a      	b.n	80004a2 <GPIO_PeriClockControl+0x1a2>
        else if (pGPIOx == GPIOH)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	4a48      	ldr	r2, [pc, #288]	@ (80004d0 <GPIO_PeriClockControl+0x1d0>)
 80003b0:	4293      	cmp	r3, r2
 80003b2:	d106      	bne.n	80003c2 <GPIO_PeriClockControl+0xc2>
            GPIOH_PCLK_EN();
 80003b4:	4b3f      	ldr	r3, [pc, #252]	@ (80004b4 <GPIO_PeriClockControl+0x1b4>)
 80003b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003b8:	4a3e      	ldr	r2, [pc, #248]	@ (80004b4 <GPIO_PeriClockControl+0x1b4>)
 80003ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003be:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003c0:	e06f      	b.n	80004a2 <GPIO_PeriClockControl+0x1a2>
        else if (pGPIOx == GPIOI)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4a43      	ldr	r2, [pc, #268]	@ (80004d4 <GPIO_PeriClockControl+0x1d4>)
 80003c6:	4293      	cmp	r3, r2
 80003c8:	d16b      	bne.n	80004a2 <GPIO_PeriClockControl+0x1a2>
            GPIOI_PCLK_EN();
 80003ca:	4b3a      	ldr	r3, [pc, #232]	@ (80004b4 <GPIO_PeriClockControl+0x1b4>)
 80003cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ce:	4a39      	ldr	r2, [pc, #228]	@ (80004b4 <GPIO_PeriClockControl+0x1b4>)
 80003d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003d4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003d6:	e064      	b.n	80004a2 <GPIO_PeriClockControl+0x1a2>
    else if (EnorDi == DISABLE)
 80003d8:	78fb      	ldrb	r3, [r7, #3]
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d161      	bne.n	80004a2 <GPIO_PeriClockControl+0x1a2>
        if (pGPIOx == GPIOA)
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	4a33      	ldr	r2, [pc, #204]	@ (80004b0 <GPIO_PeriClockControl+0x1b0>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d106      	bne.n	80003f4 <GPIO_PeriClockControl+0xf4>
            GPIOA_PCLK_DI();
 80003e6:	4b33      	ldr	r3, [pc, #204]	@ (80004b4 <GPIO_PeriClockControl+0x1b4>)
 80003e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ea:	4a32      	ldr	r2, [pc, #200]	@ (80004b4 <GPIO_PeriClockControl+0x1b4>)
 80003ec:	f023 0301 	bic.w	r3, r3, #1
 80003f0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003f2:	e056      	b.n	80004a2 <GPIO_PeriClockControl+0x1a2>
        else if (pGPIOx == GPIOB)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	4a30      	ldr	r2, [pc, #192]	@ (80004b8 <GPIO_PeriClockControl+0x1b8>)
 80003f8:	4293      	cmp	r3, r2
 80003fa:	d106      	bne.n	800040a <GPIO_PeriClockControl+0x10a>
            GPIOB_PCLK_DI();
 80003fc:	4b2d      	ldr	r3, [pc, #180]	@ (80004b4 <GPIO_PeriClockControl+0x1b4>)
 80003fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000400:	4a2c      	ldr	r2, [pc, #176]	@ (80004b4 <GPIO_PeriClockControl+0x1b4>)
 8000402:	f023 0302 	bic.w	r3, r3, #2
 8000406:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000408:	e04b      	b.n	80004a2 <GPIO_PeriClockControl+0x1a2>
        else if (pGPIOx == GPIOC)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	4a2b      	ldr	r2, [pc, #172]	@ (80004bc <GPIO_PeriClockControl+0x1bc>)
 800040e:	4293      	cmp	r3, r2
 8000410:	d106      	bne.n	8000420 <GPIO_PeriClockControl+0x120>
            GPIOC_PCLK_DI();
 8000412:	4b28      	ldr	r3, [pc, #160]	@ (80004b4 <GPIO_PeriClockControl+0x1b4>)
 8000414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000416:	4a27      	ldr	r2, [pc, #156]	@ (80004b4 <GPIO_PeriClockControl+0x1b4>)
 8000418:	f023 0304 	bic.w	r3, r3, #4
 800041c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800041e:	e040      	b.n	80004a2 <GPIO_PeriClockControl+0x1a2>
        else if (pGPIOx == GPIOD)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4a27      	ldr	r2, [pc, #156]	@ (80004c0 <GPIO_PeriClockControl+0x1c0>)
 8000424:	4293      	cmp	r3, r2
 8000426:	d106      	bne.n	8000436 <GPIO_PeriClockControl+0x136>
            GPIOD_PCLK_DI();
 8000428:	4b22      	ldr	r3, [pc, #136]	@ (80004b4 <GPIO_PeriClockControl+0x1b4>)
 800042a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800042c:	4a21      	ldr	r2, [pc, #132]	@ (80004b4 <GPIO_PeriClockControl+0x1b4>)
 800042e:	f023 0308 	bic.w	r3, r3, #8
 8000432:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000434:	e035      	b.n	80004a2 <GPIO_PeriClockControl+0x1a2>
        else if (pGPIOx == GPIOE)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	4a22      	ldr	r2, [pc, #136]	@ (80004c4 <GPIO_PeriClockControl+0x1c4>)
 800043a:	4293      	cmp	r3, r2
 800043c:	d106      	bne.n	800044c <GPIO_PeriClockControl+0x14c>
            GPIOE_PCLK_DI();
 800043e:	4b1d      	ldr	r3, [pc, #116]	@ (80004b4 <GPIO_PeriClockControl+0x1b4>)
 8000440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000442:	4a1c      	ldr	r2, [pc, #112]	@ (80004b4 <GPIO_PeriClockControl+0x1b4>)
 8000444:	f023 0310 	bic.w	r3, r3, #16
 8000448:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800044a:	e02a      	b.n	80004a2 <GPIO_PeriClockControl+0x1a2>
        else if (pGPIOx == GPIOF)
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	4a1e      	ldr	r2, [pc, #120]	@ (80004c8 <GPIO_PeriClockControl+0x1c8>)
 8000450:	4293      	cmp	r3, r2
 8000452:	d106      	bne.n	8000462 <GPIO_PeriClockControl+0x162>
            GPIOF_PCLK_DI();
 8000454:	4b17      	ldr	r3, [pc, #92]	@ (80004b4 <GPIO_PeriClockControl+0x1b4>)
 8000456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000458:	4a16      	ldr	r2, [pc, #88]	@ (80004b4 <GPIO_PeriClockControl+0x1b4>)
 800045a:	f023 0320 	bic.w	r3, r3, #32
 800045e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000460:	e01f      	b.n	80004a2 <GPIO_PeriClockControl+0x1a2>
        else if (pGPIOx == GPIOG)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	4a19      	ldr	r2, [pc, #100]	@ (80004cc <GPIO_PeriClockControl+0x1cc>)
 8000466:	4293      	cmp	r3, r2
 8000468:	d106      	bne.n	8000478 <GPIO_PeriClockControl+0x178>
            GPIOG_PCLK_DI();
 800046a:	4b12      	ldr	r3, [pc, #72]	@ (80004b4 <GPIO_PeriClockControl+0x1b4>)
 800046c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800046e:	4a11      	ldr	r2, [pc, #68]	@ (80004b4 <GPIO_PeriClockControl+0x1b4>)
 8000470:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000474:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000476:	e014      	b.n	80004a2 <GPIO_PeriClockControl+0x1a2>
        else if (pGPIOx == GPIOH)
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	4a15      	ldr	r2, [pc, #84]	@ (80004d0 <GPIO_PeriClockControl+0x1d0>)
 800047c:	4293      	cmp	r3, r2
 800047e:	d106      	bne.n	800048e <GPIO_PeriClockControl+0x18e>
            GPIOH_PCLK_DI();
 8000480:	4b0c      	ldr	r3, [pc, #48]	@ (80004b4 <GPIO_PeriClockControl+0x1b4>)
 8000482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000484:	4a0b      	ldr	r2, [pc, #44]	@ (80004b4 <GPIO_PeriClockControl+0x1b4>)
 8000486:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800048a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800048c:	e009      	b.n	80004a2 <GPIO_PeriClockControl+0x1a2>
        else if (pGPIOx == GPIOI)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4a10      	ldr	r2, [pc, #64]	@ (80004d4 <GPIO_PeriClockControl+0x1d4>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d105      	bne.n	80004a2 <GPIO_PeriClockControl+0x1a2>
            GPIOI_PCLK_DI();
 8000496:	4b07      	ldr	r3, [pc, #28]	@ (80004b4 <GPIO_PeriClockControl+0x1b4>)
 8000498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800049a:	4a06      	ldr	r2, [pc, #24]	@ (80004b4 <GPIO_PeriClockControl+0x1b4>)
 800049c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80004a0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004a2:	bf00      	nop
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	40020000 	.word	0x40020000
 80004b4:	40023800 	.word	0x40023800
 80004b8:	40020400 	.word	0x40020400
 80004bc:	40020800 	.word	0x40020800
 80004c0:	40020c00 	.word	0x40020c00
 80004c4:	40021000 	.word	0x40021000
 80004c8:	40021400 	.word	0x40021400
 80004cc:	40021800 	.word	0x40021800
 80004d0:	40021c00 	.word	0x40021c00
 80004d4:	40022000 	.word	0x40022000

080004d8 <GPIO_Init>:

/**
 * Init and De-init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80004d8:	b480      	push	{r7}
 80004da:	b087      	sub	sp, #28
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	uint32_t tmp = 0;	// tmp register
 80004e0:	2300      	movs	r3, #0
 80004e2:	617b      	str	r3, [r7, #20]

	// Configure the mode of the GPIO pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)	// Non-interrupt mode
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	795b      	ldrb	r3, [r3, #5]
 80004e8:	2b03      	cmp	r3, #3
 80004ea:	d820      	bhi.n	800052e <GPIO_Init+0x56>
	{
		// Clear the pin's bitfields
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	681a      	ldr	r2, [r3, #0]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	791b      	ldrb	r3, [r3, #4]
 80004f6:	005b      	lsls	r3, r3, #1
 80004f8:	2103      	movs	r1, #3
 80004fa:	fa01 f303 	lsl.w	r3, r1, r3
 80004fe:	43db      	mvns	r3, r3
 8000500:	4619      	mov	r1, r3
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	400a      	ands	r2, r1
 8000508:	601a      	str	r2, [r3, #0]

		// Left shift to the pin's bit position in the GPIO pin mode register
		tmp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	795b      	ldrb	r3, [r3, #5]
 800050e:	461a      	mov	r2, r3
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	791b      	ldrb	r3, [r3, #4]
 8000514:	005b      	lsls	r3, r3, #1
 8000516:	fa02 f303 	lsl.w	r3, r2, r3
 800051a:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER |= tmp;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	6819      	ldr	r1, [r3, #0]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	697a      	ldr	r2, [r7, #20]
 8000528:	430a      	orrs	r2, r1
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	e0cd      	b.n	80006ca <GPIO_Init+0x1f2>
	}
	else	// Interrupt mode
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	795b      	ldrb	r3, [r3, #5]
 8000532:	2b04      	cmp	r3, #4
 8000534:	d117      	bne.n	8000566 <GPIO_Init+0x8e>
		{
			// Configure the Falling Trigger Selection Register (FTSR)
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000536:	4b4e      	ldr	r3, [pc, #312]	@ (8000670 <GPIO_Init+0x198>)
 8000538:	68db      	ldr	r3, [r3, #12]
 800053a:	687a      	ldr	r2, [r7, #4]
 800053c:	7912      	ldrb	r2, [r2, #4]
 800053e:	4611      	mov	r1, r2
 8000540:	2201      	movs	r2, #1
 8000542:	408a      	lsls	r2, r1
 8000544:	4611      	mov	r1, r2
 8000546:	4a4a      	ldr	r2, [pc, #296]	@ (8000670 <GPIO_Init+0x198>)
 8000548:	430b      	orrs	r3, r1
 800054a:	60d3      	str	r3, [r2, #12]

			// Ensure rising edge trigger selection is disabled by clearing the bit field
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800054c:	4b48      	ldr	r3, [pc, #288]	@ (8000670 <GPIO_Init+0x198>)
 800054e:	689b      	ldr	r3, [r3, #8]
 8000550:	687a      	ldr	r2, [r7, #4]
 8000552:	7912      	ldrb	r2, [r2, #4]
 8000554:	4611      	mov	r1, r2
 8000556:	2201      	movs	r2, #1
 8000558:	408a      	lsls	r2, r1
 800055a:	43d2      	mvns	r2, r2
 800055c:	4611      	mov	r1, r2
 800055e:	4a44      	ldr	r2, [pc, #272]	@ (8000670 <GPIO_Init+0x198>)
 8000560:	400b      	ands	r3, r1
 8000562:	6093      	str	r3, [r2, #8]
 8000564:	e035      	b.n	80005d2 <GPIO_Init+0xfa>

		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	795b      	ldrb	r3, [r3, #5]
 800056a:	2b05      	cmp	r3, #5
 800056c:	d117      	bne.n	800059e <GPIO_Init+0xc6>
		{
			// Configure the Rising Trigger Selection Register (RTSR)
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800056e:	4b40      	ldr	r3, [pc, #256]	@ (8000670 <GPIO_Init+0x198>)
 8000570:	689b      	ldr	r3, [r3, #8]
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	7912      	ldrb	r2, [r2, #4]
 8000576:	4611      	mov	r1, r2
 8000578:	2201      	movs	r2, #1
 800057a:	408a      	lsls	r2, r1
 800057c:	4611      	mov	r1, r2
 800057e:	4a3c      	ldr	r2, [pc, #240]	@ (8000670 <GPIO_Init+0x198>)
 8000580:	430b      	orrs	r3, r1
 8000582:	6093      	str	r3, [r2, #8]

			// Ensure falling edge trigger selection is disabled by clearing the bit field
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000584:	4b3a      	ldr	r3, [pc, #232]	@ (8000670 <GPIO_Init+0x198>)
 8000586:	68db      	ldr	r3, [r3, #12]
 8000588:	687a      	ldr	r2, [r7, #4]
 800058a:	7912      	ldrb	r2, [r2, #4]
 800058c:	4611      	mov	r1, r2
 800058e:	2201      	movs	r2, #1
 8000590:	408a      	lsls	r2, r1
 8000592:	43d2      	mvns	r2, r2
 8000594:	4611      	mov	r1, r2
 8000596:	4a36      	ldr	r2, [pc, #216]	@ (8000670 <GPIO_Init+0x198>)
 8000598:	400b      	ands	r3, r1
 800059a:	60d3      	str	r3, [r2, #12]
 800059c:	e019      	b.n	80005d2 <GPIO_Init+0xfa>

		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	795b      	ldrb	r3, [r3, #5]
 80005a2:	2b06      	cmp	r3, #6
 80005a4:	d115      	bne.n	80005d2 <GPIO_Init+0xfa>
		{
			// Configure both the Falling and Rising Trigger Selection Register (FTSR)
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80005a6:	4b32      	ldr	r3, [pc, #200]	@ (8000670 <GPIO_Init+0x198>)
 80005a8:	689b      	ldr	r3, [r3, #8]
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	7912      	ldrb	r2, [r2, #4]
 80005ae:	4611      	mov	r1, r2
 80005b0:	2201      	movs	r2, #1
 80005b2:	408a      	lsls	r2, r1
 80005b4:	4611      	mov	r1, r2
 80005b6:	4a2e      	ldr	r2, [pc, #184]	@ (8000670 <GPIO_Init+0x198>)
 80005b8:	430b      	orrs	r3, r1
 80005ba:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80005bc:	4b2c      	ldr	r3, [pc, #176]	@ (8000670 <GPIO_Init+0x198>)
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	7912      	ldrb	r2, [r2, #4]
 80005c4:	4611      	mov	r1, r2
 80005c6:	2201      	movs	r2, #1
 80005c8:	408a      	lsls	r2, r1
 80005ca:	4611      	mov	r1, r2
 80005cc:	4a28      	ldr	r2, [pc, #160]	@ (8000670 <GPIO_Init+0x198>)
 80005ce:	430b      	orrs	r3, r1
 80005d0:	60d3      	str	r3, [r2, #12]
		}
		// Configure the GPIO port selection register in SYSCFG_EXITCR
		SYSCFG_PCLK_EN();	// First enable the SYSCFG peripheral clock (APB2)
 80005d2:	4b28      	ldr	r3, [pc, #160]	@ (8000674 <GPIO_Init+0x19c>)
 80005d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005d6:	4a27      	ldr	r2, [pc, #156]	@ (8000674 <GPIO_Init+0x19c>)
 80005d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005dc:	6453      	str	r3, [r2, #68]	@ 0x44

		// Enable control of the corresponding EXTI line for this pin
		uint8_t controlRegisterIndex = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	791b      	ldrb	r3, [r3, #4]
 80005e2:	089b      	lsrs	r3, r3, #2
 80005e4:	74fb      	strb	r3, [r7, #19]
		uint8_t bitShiftOffset = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	791b      	ldrb	r3, [r3, #4]
 80005ea:	f003 0303 	and.w	r3, r3, #3
 80005ee:	74bb      	strb	r3, [r7, #18]
		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a20      	ldr	r2, [pc, #128]	@ (8000678 <GPIO_Init+0x1a0>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d050      	beq.n	800069c <GPIO_Init+0x1c4>
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a1f      	ldr	r2, [pc, #124]	@ (800067c <GPIO_Init+0x1a4>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d032      	beq.n	800066a <GPIO_Init+0x192>
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a1d      	ldr	r2, [pc, #116]	@ (8000680 <GPIO_Init+0x1a8>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d02b      	beq.n	8000666 <GPIO_Init+0x18e>
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a1c      	ldr	r2, [pc, #112]	@ (8000684 <GPIO_Init+0x1ac>)
 8000614:	4293      	cmp	r3, r2
 8000616:	d024      	beq.n	8000662 <GPIO_Init+0x18a>
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a1a      	ldr	r2, [pc, #104]	@ (8000688 <GPIO_Init+0x1b0>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d01d      	beq.n	800065e <GPIO_Init+0x186>
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a19      	ldr	r2, [pc, #100]	@ (800068c <GPIO_Init+0x1b4>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d016      	beq.n	800065a <GPIO_Init+0x182>
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a17      	ldr	r2, [pc, #92]	@ (8000690 <GPIO_Init+0x1b8>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d00f      	beq.n	8000656 <GPIO_Init+0x17e>
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a16      	ldr	r2, [pc, #88]	@ (8000694 <GPIO_Init+0x1bc>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d008      	beq.n	8000652 <GPIO_Init+0x17a>
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a14      	ldr	r2, [pc, #80]	@ (8000698 <GPIO_Init+0x1c0>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d101      	bne.n	800064e <GPIO_Init+0x176>
 800064a:	2308      	movs	r3, #8
 800064c:	e027      	b.n	800069e <GPIO_Init+0x1c6>
 800064e:	2300      	movs	r3, #0
 8000650:	e025      	b.n	800069e <GPIO_Init+0x1c6>
 8000652:	2307      	movs	r3, #7
 8000654:	e023      	b.n	800069e <GPIO_Init+0x1c6>
 8000656:	2306      	movs	r3, #6
 8000658:	e021      	b.n	800069e <GPIO_Init+0x1c6>
 800065a:	2305      	movs	r3, #5
 800065c:	e01f      	b.n	800069e <GPIO_Init+0x1c6>
 800065e:	2304      	movs	r3, #4
 8000660:	e01d      	b.n	800069e <GPIO_Init+0x1c6>
 8000662:	2303      	movs	r3, #3
 8000664:	e01b      	b.n	800069e <GPIO_Init+0x1c6>
 8000666:	2302      	movs	r3, #2
 8000668:	e019      	b.n	800069e <GPIO_Init+0x1c6>
 800066a:	2301      	movs	r3, #1
 800066c:	e017      	b.n	800069e <GPIO_Init+0x1c6>
 800066e:	bf00      	nop
 8000670:	40013c00 	.word	0x40013c00
 8000674:	40023800 	.word	0x40023800
 8000678:	40020000 	.word	0x40020000
 800067c:	40020400 	.word	0x40020400
 8000680:	40020800 	.word	0x40020800
 8000684:	40020c00 	.word	0x40020c00
 8000688:	40021000 	.word	0x40021000
 800068c:	40021400 	.word	0x40021400
 8000690:	40021800 	.word	0x40021800
 8000694:	40021c00 	.word	0x40021c00
 8000698:	40022000 	.word	0x40022000
 800069c:	2300      	movs	r3, #0
 800069e:	747b      	strb	r3, [r7, #17]
		SYSCFG->EXTICR[controlRegisterIndex] = ( portCode << (4 * bitShiftOffset) );
 80006a0:	7c7a      	ldrb	r2, [r7, #17]
 80006a2:	7cbb      	ldrb	r3, [r7, #18]
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	fa02 f103 	lsl.w	r1, r2, r3
 80006aa:	4a5b      	ldr	r2, [pc, #364]	@ (8000818 <GPIO_Init+0x340>)
 80006ac:	7cfb      	ldrb	r3, [r7, #19]
 80006ae:	3302      	adds	r3, #2
 80006b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// Enable the EXTI interrupt delivery using the Interrupt Mask register (IMR)
		EXTI->IMR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80006b4:	4b59      	ldr	r3, [pc, #356]	@ (800081c <GPIO_Init+0x344>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	7912      	ldrb	r2, [r2, #4]
 80006bc:	4611      	mov	r1, r2
 80006be:	2201      	movs	r2, #1
 80006c0:	408a      	lsls	r2, r1
 80006c2:	4611      	mov	r1, r2
 80006c4:	4a55      	ldr	r2, [pc, #340]	@ (800081c <GPIO_Init+0x344>)
 80006c6:	430b      	orrs	r3, r1
 80006c8:	6013      	str	r3, [r2, #0]
	}
	tmp = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]

	// Configure the speed
	// Clear the pin's bitfields
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	689a      	ldr	r2, [r3, #8]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	791b      	ldrb	r3, [r3, #4]
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	2103      	movs	r1, #3
 80006dc:	fa01 f303 	lsl.w	r3, r1, r3
 80006e0:	43db      	mvns	r3, r3
 80006e2:	4619      	mov	r1, r3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	400a      	ands	r2, r1
 80006ea:	609a      	str	r2, [r3, #8]

	tmp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	799b      	ldrb	r3, [r3, #6]
 80006f0:	461a      	mov	r2, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	791b      	ldrb	r3, [r3, #4]
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	fa02 f303 	lsl.w	r3, r2, r3
 80006fc:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR |= tmp;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	6899      	ldr	r1, [r3, #8]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	697a      	ldr	r2, [r7, #20]
 800070a:	430a      	orrs	r2, r1
 800070c:	609a      	str	r2, [r3, #8]

	tmp = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	617b      	str	r3, [r7, #20]

	// Configure pull-up/pull-down settings
	// Clear the pin's bitfields
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	68da      	ldr	r2, [r3, #12]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	791b      	ldrb	r3, [r3, #4]
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	2103      	movs	r1, #3
 8000720:	fa01 f303 	lsl.w	r3, r1, r3
 8000724:	43db      	mvns	r3, r3
 8000726:	4619      	mov	r1, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	400a      	ands	r2, r1
 800072e:	60da      	str	r2, [r3, #12]

	tmp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	79db      	ldrb	r3, [r3, #7]
 8000734:	461a      	mov	r2, r3
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	791b      	ldrb	r3, [r3, #4]
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	fa02 f303 	lsl.w	r3, r2, r3
 8000740:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR |= tmp;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	68d9      	ldr	r1, [r3, #12]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	697a      	ldr	r2, [r7, #20]
 800074e:	430a      	orrs	r2, r1
 8000750:	60da      	str	r2, [r3, #12]

	tmp = 0;
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]

	// Configure the output type
	// Clear the pin's bitfield
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	685a      	ldr	r2, [r3, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	791b      	ldrb	r3, [r3, #4]
 8000760:	4619      	mov	r1, r3
 8000762:	2301      	movs	r3, #1
 8000764:	408b      	lsls	r3, r1
 8000766:	43db      	mvns	r3, r3
 8000768:	4619      	mov	r1, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	400a      	ands	r2, r1
 8000770:	605a      	str	r2, [r3, #4]

	tmp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	7a1b      	ldrb	r3, [r3, #8]
 8000776:	461a      	mov	r2, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	791b      	ldrb	r3, [r3, #4]
 800077c:	fa02 f303 	lsl.w	r3, r2, r3
 8000780:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER |= tmp;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	6859      	ldr	r1, [r3, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	697a      	ldr	r2, [r7, #20]
 800078e:	430a      	orrs	r2, r1
 8000790:	605a      	str	r2, [r3, #4]

	tmp = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]

	// Configure the alternate functionality if required
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	795b      	ldrb	r3, [r3, #5]
 800079a:	2b02      	cmp	r3, #2
 800079c:	d136      	bne.n	800080c <GPIO_Init+0x334>
	{
		// Determine if the pin configuration belongs to the high or low alternate function register
		uint8_t regPosition = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber >= 8 );
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	791b      	ldrb	r3, [r3, #4]
 80007a2:	2b07      	cmp	r3, #7
 80007a4:	bf8c      	ite	hi
 80007a6:	2301      	movhi	r3, #1
 80007a8:	2300      	movls	r3, #0
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	743b      	strb	r3, [r7, #16]
		uint8_t bitShiftOffset = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	791b      	ldrb	r3, [r3, #4]
 80007b2:	f003 0307 	and.w	r3, r3, #7
 80007b6:	73fb      	strb	r3, [r7, #15]

		// Clear the pin's bitfields
		pGPIOHandle->pGPIOx->ARF[regPosition] &= ~( 0xF << ( 4 * bitShiftOffset ) );
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	7c3a      	ldrb	r2, [r7, #16]
 80007be:	3208      	adds	r2, #8
 80007c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007c4:	7bfb      	ldrb	r3, [r7, #15]
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	220f      	movs	r2, #15
 80007ca:	fa02 f303 	lsl.w	r3, r2, r3
 80007ce:	43db      	mvns	r3, r3
 80007d0:	4618      	mov	r0, r3
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	7c3a      	ldrb	r2, [r7, #16]
 80007d8:	4001      	ands	r1, r0
 80007da:	3208      	adds	r2, #8
 80007dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		tmp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * bitShiftOffset ) );
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	7a5b      	ldrb	r3, [r3, #9]
 80007e4:	461a      	mov	r2, r3
 80007e6:	7bfb      	ldrb	r3, [r7, #15]
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	fa02 f303 	lsl.w	r3, r2, r3
 80007ee:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->ARF[regPosition] |= tmp;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	7c3a      	ldrb	r2, [r7, #16]
 80007f6:	3208      	adds	r2, #8
 80007f8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	7c3a      	ldrb	r2, [r7, #16]
 8000802:	6979      	ldr	r1, [r7, #20]
 8000804:	4301      	orrs	r1, r0
 8000806:	3208      	adds	r2, #8
 8000808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 800080c:	bf00      	nop
 800080e:	371c      	adds	r7, #28
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr
 8000818:	40013800 	.word	0x40013800
 800081c:	40013c00 	.word	0x40013c00

08000820 <GPIO_WriteToOutputPin>:
	value = (uint16_t)pGPIOx->IDR;
	return value;
} // GPIO_ReadFromInputPort

void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber, uint8_t value)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	460b      	mov	r3, r1
 800082a:	70fb      	strb	r3, [r7, #3]
 800082c:	4613      	mov	r3, r2
 800082e:	70bb      	strb	r3, [r7, #2]
	if(value == GPIO_PIN_SET)
 8000830:	78bb      	ldrb	r3, [r7, #2]
 8000832:	2b01      	cmp	r3, #1
 8000834:	d109      	bne.n	800084a <GPIO_WriteToOutputPin+0x2a>
	{
		pGPIOx->ODR |= (1 << pinNumber);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	695b      	ldr	r3, [r3, #20]
 800083a:	78fa      	ldrb	r2, [r7, #3]
 800083c:	2101      	movs	r1, #1
 800083e:	fa01 f202 	lsl.w	r2, r1, r2
 8000842:	431a      	orrs	r2, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	615a      	str	r2, [r3, #20]
	}
	else
	{
		pGPIOx->ODR &= ~(1 << pinNumber);
	}
} // GPIO_WriteToOutputPin
 8000848:	e009      	b.n	800085e <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~(1 << pinNumber);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	695b      	ldr	r3, [r3, #20]
 800084e:	78fa      	ldrb	r2, [r7, #3]
 8000850:	2101      	movs	r1, #1
 8000852:	fa01 f202 	lsl.w	r2, r1, r2
 8000856:	43d2      	mvns	r2, r2
 8000858:	401a      	ands	r2, r3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	615a      	str	r2, [r3, #20]
} // GPIO_WriteToOutputPin
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <GPIO_ToggleOutputPin>:
{
	pGPIOx->ODR = value;
} // GPIO_WriteToOutputPort

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber)
{
 800086a:	b480      	push	{r7}
 800086c:	b083      	sub	sp, #12
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
 8000872:	460b      	mov	r3, r1
 8000874:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= ( 1 << pinNumber ) ;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	78fa      	ldrb	r2, [r7, #3]
 800087c:	2101      	movs	r1, #1
 800087e:	fa01 f202 	lsl.w	r2, r1, r2
 8000882:	405a      	eors	r2, r3
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	615a      	str	r2, [r3, #20]
} // GPIO_ToggleOutputPin
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <GPIO_IRQInterruptConfig>:

/**
 * IRQ configuration and ISR handling
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	460a      	mov	r2, r1
 800089e:	71fb      	strb	r3, [r7, #7]
 80008a0:	4613      	mov	r3, r2
 80008a2:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE)
 80008a4:	79bb      	ldrb	r3, [r7, #6]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d133      	bne.n	8000912 <GPIO_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2b1f      	cmp	r3, #31
 80008ae:	d80a      	bhi.n	80008c6 <GPIO_IRQInterruptConfig+0x32>
		{
			// Write to ISER0
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 80008b0:	4b35      	ldr	r3, [pc, #212]	@ (8000988 <GPIO_IRQInterruptConfig+0xf4>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	79fa      	ldrb	r2, [r7, #7]
 80008b6:	2101      	movs	r1, #1
 80008b8:	fa01 f202 	lsl.w	r2, r1, r2
 80008bc:	4611      	mov	r1, r2
 80008be:	4a32      	ldr	r2, [pc, #200]	@ (8000988 <GPIO_IRQInterruptConfig+0xf4>)
 80008c0:	430b      	orrs	r3, r1
 80008c2:	6013      	str	r3, [r2, #0]
		{
			// Write to ICER2
			*NVIC_ICER2 |= ( 1 << ( IRQNumber % 64 ) );
		}
	}
}
 80008c4:	e059      	b.n	800097a <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64) // 32 to 63
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	2b1f      	cmp	r3, #31
 80008ca:	d90f      	bls.n	80008ec <GPIO_IRQInterruptConfig+0x58>
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	2b3f      	cmp	r3, #63	@ 0x3f
 80008d0:	d80c      	bhi.n	80008ec <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << ( IRQNumber % 32 ) );
 80008d2:	4b2e      	ldr	r3, [pc, #184]	@ (800098c <GPIO_IRQInterruptConfig+0xf8>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	79fa      	ldrb	r2, [r7, #7]
 80008d8:	f002 021f 	and.w	r2, r2, #31
 80008dc:	2101      	movs	r1, #1
 80008de:	fa01 f202 	lsl.w	r2, r1, r2
 80008e2:	4611      	mov	r1, r2
 80008e4:	4a29      	ldr	r2, [pc, #164]	@ (800098c <GPIO_IRQInterruptConfig+0xf8>)
 80008e6:	430b      	orrs	r3, r1
 80008e8:	6013      	str	r3, [r2, #0]
 80008ea:	e046      	b.n	800097a <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96) // 64 to 95
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	2b3f      	cmp	r3, #63	@ 0x3f
 80008f0:	d943      	bls.n	800097a <GPIO_IRQInterruptConfig+0xe6>
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	2b5f      	cmp	r3, #95	@ 0x5f
 80008f6:	d840      	bhi.n	800097a <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= ( 1 << ( IRQNumber % 64 ) );
 80008f8:	4b25      	ldr	r3, [pc, #148]	@ (8000990 <GPIO_IRQInterruptConfig+0xfc>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	79fa      	ldrb	r2, [r7, #7]
 80008fe:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000902:	2101      	movs	r1, #1
 8000904:	fa01 f202 	lsl.w	r2, r1, r2
 8000908:	4611      	mov	r1, r2
 800090a:	4a21      	ldr	r2, [pc, #132]	@ (8000990 <GPIO_IRQInterruptConfig+0xfc>)
 800090c:	430b      	orrs	r3, r1
 800090e:	6013      	str	r3, [r2, #0]
}
 8000910:	e033      	b.n	800097a <GPIO_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	2b1f      	cmp	r3, #31
 8000916:	d80a      	bhi.n	800092e <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8000918:	4b1e      	ldr	r3, [pc, #120]	@ (8000994 <GPIO_IRQInterruptConfig+0x100>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	79fa      	ldrb	r2, [r7, #7]
 800091e:	2101      	movs	r1, #1
 8000920:	fa01 f202 	lsl.w	r2, r1, r2
 8000924:	4611      	mov	r1, r2
 8000926:	4a1b      	ldr	r2, [pc, #108]	@ (8000994 <GPIO_IRQInterruptConfig+0x100>)
 8000928:	430b      	orrs	r3, r1
 800092a:	6013      	str	r3, [r2, #0]
}
 800092c:	e025      	b.n	800097a <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64) // 32 to 63
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	2b1f      	cmp	r3, #31
 8000932:	d90f      	bls.n	8000954 <GPIO_IRQInterruptConfig+0xc0>
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	2b3f      	cmp	r3, #63	@ 0x3f
 8000938:	d80c      	bhi.n	8000954 <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << ( IRQNumber % 32 ) );
 800093a:	4b17      	ldr	r3, [pc, #92]	@ (8000998 <GPIO_IRQInterruptConfig+0x104>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	79fa      	ldrb	r2, [r7, #7]
 8000940:	f002 021f 	and.w	r2, r2, #31
 8000944:	2101      	movs	r1, #1
 8000946:	fa01 f202 	lsl.w	r2, r1, r2
 800094a:	4611      	mov	r1, r2
 800094c:	4a12      	ldr	r2, [pc, #72]	@ (8000998 <GPIO_IRQInterruptConfig+0x104>)
 800094e:	430b      	orrs	r3, r1
 8000950:	6013      	str	r3, [r2, #0]
 8000952:	e012      	b.n	800097a <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96) // 64 to 95
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	2b3f      	cmp	r3, #63	@ 0x3f
 8000958:	d90f      	bls.n	800097a <GPIO_IRQInterruptConfig+0xe6>
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	2b5f      	cmp	r3, #95	@ 0x5f
 800095e:	d80c      	bhi.n	800097a <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= ( 1 << ( IRQNumber % 64 ) );
 8000960:	4b0e      	ldr	r3, [pc, #56]	@ (800099c <GPIO_IRQInterruptConfig+0x108>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	79fa      	ldrb	r2, [r7, #7]
 8000966:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800096a:	2101      	movs	r1, #1
 800096c:	fa01 f202 	lsl.w	r2, r1, r2
 8000970:	4611      	mov	r1, r2
 8000972:	4a0a      	ldr	r2, [pc, #40]	@ (800099c <GPIO_IRQInterruptConfig+0x108>)
 8000974:	430b      	orrs	r3, r1
 8000976:	6013      	str	r3, [r2, #0]
}
 8000978:	e7ff      	b.n	800097a <GPIO_IRQInterruptConfig+0xe6>
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	e000e100 	.word	0xe000e100
 800098c:	e000e104 	.word	0xe000e104
 8000990:	e000e108 	.word	0xe000e108
 8000994:	e000e180 	.word	0xe000e180
 8000998:	e000e184 	.word	0xe000e184
 800099c:	e000e188 	.word	0xe000e188

080009a0 <GPIO_IRQPriorityConfig>:

void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	6039      	str	r1, [r7, #0]
 80009aa:	71fb      	strb	r3, [r7, #7]
	// Get IPR register index
	uint8_t iprx = IRQNumber / 4;
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	089b      	lsrs	r3, r3, #2
 80009b0:	73fb      	strb	r3, [r7, #15]
	uint8_t iprxSection = IRQNumber % 4;
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	f003 0303 	and.w	r3, r3, #3
 80009b8:	73bb      	strb	r3, [r7, #14]

	uint8_t bitShiftOffset = ( 8 * iprxSection ) + (8 - NO_PR_BITS_IMPLEMENTED);
 80009ba:	7bbb      	ldrb	r3, [r7, #14]
 80009bc:	00db      	lsls	r3, r3, #3
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	3304      	adds	r3, #4
 80009c2:	737b      	strb	r3, [r7, #13]
	uint32_t *pNvicIprAddr = NVIC_PR_BASEEADDR + ( iprx );
 80009c4:	7bfb      	ldrb	r3, [r7, #15]
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 80009cc:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 80009d0:	60bb      	str	r3, [r7, #8]
	*(pNvicIprAddr) |= ( IRQPriority << bitShiftOffset);
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	7b7b      	ldrb	r3, [r7, #13]
 80009d8:	6839      	ldr	r1, [r7, #0]
 80009da:	fa01 f303 	lsl.w	r3, r1, r3
 80009de:	431a      	orrs	r2, r3
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	601a      	str	r2, [r3, #0]
}
 80009e4:	bf00      	nop
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <GPIO_IRQHandling>:

void GPIO_IRQHandling(uint8_t pinNumber)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	71fb      	strb	r3, [r7, #7]
	// Clear the EXTI Pending Register corresponding to the pin number
	if(EXTI->PR & (1 << pinNumber))
 80009fa:	4b0c      	ldr	r3, [pc, #48]	@ (8000a2c <GPIO_IRQHandling+0x3c>)
 80009fc:	695b      	ldr	r3, [r3, #20]
 80009fe:	79fa      	ldrb	r2, [r7, #7]
 8000a00:	2101      	movs	r1, #1
 8000a02:	fa01 f202 	lsl.w	r2, r1, r2
 8000a06:	4013      	ands	r3, r2
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d009      	beq.n	8000a20 <GPIO_IRQHandling+0x30>
	{
		// Clear the pending register bit by writing 1
		EXTI->PR |= ( 1 << pinNumber );
 8000a0c:	4b07      	ldr	r3, [pc, #28]	@ (8000a2c <GPIO_IRQHandling+0x3c>)
 8000a0e:	695b      	ldr	r3, [r3, #20]
 8000a10:	79fa      	ldrb	r2, [r7, #7]
 8000a12:	2101      	movs	r1, #1
 8000a14:	fa01 f202 	lsl.w	r2, r1, r2
 8000a18:	4611      	mov	r1, r2
 8000a1a:	4a04      	ldr	r2, [pc, #16]	@ (8000a2c <GPIO_IRQHandling+0x3c>)
 8000a1c:	430b      	orrs	r3, r1
 8000a1e:	6153      	str	r3, [r2, #20]
	}
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	40013c00 	.word	0x40013c00

08000a30 <memset>:
 8000a30:	4402      	add	r2, r0
 8000a32:	4603      	mov	r3, r0
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d100      	bne.n	8000a3a <memset+0xa>
 8000a38:	4770      	bx	lr
 8000a3a:	f803 1b01 	strb.w	r1, [r3], #1
 8000a3e:	e7f9      	b.n	8000a34 <memset+0x4>

08000a40 <__libc_init_array>:
 8000a40:	b570      	push	{r4, r5, r6, lr}
 8000a42:	4d0d      	ldr	r5, [pc, #52]	@ (8000a78 <__libc_init_array+0x38>)
 8000a44:	4c0d      	ldr	r4, [pc, #52]	@ (8000a7c <__libc_init_array+0x3c>)
 8000a46:	1b64      	subs	r4, r4, r5
 8000a48:	10a4      	asrs	r4, r4, #2
 8000a4a:	2600      	movs	r6, #0
 8000a4c:	42a6      	cmp	r6, r4
 8000a4e:	d109      	bne.n	8000a64 <__libc_init_array+0x24>
 8000a50:	4d0b      	ldr	r5, [pc, #44]	@ (8000a80 <__libc_init_array+0x40>)
 8000a52:	4c0c      	ldr	r4, [pc, #48]	@ (8000a84 <__libc_init_array+0x44>)
 8000a54:	f000 f818 	bl	8000a88 <_init>
 8000a58:	1b64      	subs	r4, r4, r5
 8000a5a:	10a4      	asrs	r4, r4, #2
 8000a5c:	2600      	movs	r6, #0
 8000a5e:	42a6      	cmp	r6, r4
 8000a60:	d105      	bne.n	8000a6e <__libc_init_array+0x2e>
 8000a62:	bd70      	pop	{r4, r5, r6, pc}
 8000a64:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a68:	4798      	blx	r3
 8000a6a:	3601      	adds	r6, #1
 8000a6c:	e7ee      	b.n	8000a4c <__libc_init_array+0xc>
 8000a6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a72:	4798      	blx	r3
 8000a74:	3601      	adds	r6, #1
 8000a76:	e7f2      	b.n	8000a5e <__libc_init_array+0x1e>
 8000a78:	08000aa0 	.word	0x08000aa0
 8000a7c:	08000aa0 	.word	0x08000aa0
 8000a80:	08000aa0 	.word	0x08000aa0
 8000a84:	08000aa4 	.word	0x08000aa4

08000a88 <_init>:
 8000a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a8a:	bf00      	nop
 8000a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a8e:	bc08      	pop	{r3}
 8000a90:	469e      	mov	lr, r3
 8000a92:	4770      	bx	lr

08000a94 <_fini>:
 8000a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a96:	bf00      	nop
 8000a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a9a:	bc08      	pop	{r3}
 8000a9c:	469e      	mov	lr, r3
 8000a9e:	4770      	bx	lr
